{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","inputValue","selectValue","handleInputChange","event","setState","target","value","hendlerSelect","this","props","todos","checkInput","userID","className","placeholder","onChange","disabled","filter","ele","title","includes","elem","completed","map","todo","key","Math","random","classnames","type","checked","id","onClick","userId","React","Component","API_URL","getUser","fetch","then","response","json","CurrentUser","currentUser","result","data","prevProps","resetHandler","name","email","phone","Button","variant","App","selectedUserId","checkedHandler","todoID","prevState","item","find","element","selectUserHandler","shuffle","a","i","length","j","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.390175e8.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    inputValue: '',\n    selectValue: '',\n  }\n\n  handleInputChange = (event) => {\n    this.setState({ inputValue: event.target.value });\n  };\n\n  hendlerSelect = (event) => {\n    this.setState({ selectValue: event.target.value });\n  };\n\n  render() {\n    const { todos, checkInput, userID } = this.props;\n    const { inputValue } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <div>\n          <h2>Sort for todos</h2>\n          <div\n            className=\"TodoList__inputField\"\n          >\n            <input\n              placeholder=\"Todo name\"\n              value={this.state.inputValue}\n              onChange={this.handleInputChange}\n            />\n            <select\n              className=\"TodoList__select\"\n              onChange={this.hendlerSelect}\n            >\n              <option disabled>select type</option>\n              <option>all</option>\n              <option>active</option>\n              <option>completed</option>\n            </select>\n          </div>\n        </div>\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos\n              .filter(ele => ele.title !== null\n                && ele.title.includes(inputValue))\n              .filter((elem) => {\n                if (this.state.selectValue === 'active') {\n                  return elem.completed === false;\n                }\n\n                if (this.state.selectValue === 'completed') {\n                  return elem.completed === true;\n                }\n\n                return elem;\n              })\n              .map(todo => (\n                <li\n                  key={Math.random()}\n                  className={classnames('TodoList__item', {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  })}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      onChange={() => checkInput(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                    type=\"button\"\n                    onClick={() => {\n                      userID(todo.userId);\n                    }}\n                  >\n                    User#\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  checkInput: PropTypes.func.isRequired,\n  userID: PropTypes.func.isRequired,\n};\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nexport const getAll = () => fetch(`${API_URL}/todos`)\n  .then(response => response.json());\n\nexport const getUser = userId => fetch(`${API_URL}/users/${userId}`)\n  .then(response => response.json());\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    currentUser: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((result) => {\n        this.setState({\n          currentUser: result.data,\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((result) => {\n          this.setState({\n            currentUser: result.data,\n          });\n        });\n    }\n  }\n\n  render() {\n    const { currentUser } = this.state;\n    const { resetHandler } = this.props;\n\n    return (\n      <>\n        { currentUser === null ? (\n          <h1>Error dataBase</h1>\n        ) : (\n          <>\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {currentUser.id}\n                </span>\n              </h2>\n              <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n              <p className=\"CurrentUser__email\">{currentUser.email}</p>\n              <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n            </div>\n            <Button\n              variant=\"secondary\"\n              onClick={resetHandler}\n            >\n              Reset\n            </Button>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  resetHandler: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'react-bootstrap';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAll } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAll()\n      .then((result) => {\n        this.setState({\n          todos: result.data,\n        });\n      });\n  }\n\n  checkedHandler = (todoID) => {\n    this.setState((prevState) => {\n      const item = prevState.todos.find(element => element.id === todoID);\n\n      item.completed = !item.completed;\n\n      return {\n        todos: [...prevState.todos],\n      };\n    });\n  }\n\n  selectUserHandler = (userID) => {\n    this.setState({ selectedUserId: userID });\n  }\n\n  resetHandler = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  shuffle = (a) => {\n    for (let i = a.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      // eslint-disable-next-line no-param-reassign\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n\n    this.setState({ todos: a });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <Button\n            onClick={() => this.shuffle(this.state.todos)}\n          >\n            Random\n          </Button>\n          <TodoList\n            todos={todos}\n            checkInput={this.checkedHandler}\n            userID={this.selectUserHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetHandler={this.resetHandler}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}